/* ======================================
========================================= COLORS
====================================== */


//  Set all base colors
$colors: (
  red: rgb(255,0,0),
  blue: #1797ff,
  robin: #B2E6F7,
  green: #59d488,
  egg: #fff7aa,
  navy: #180f50,
);

$ultra-black: #000000;
$black: #1C1D1D;
$white: #ffffff;
$gray-lighter: #BFBFBF;
$gray: #B7B7B7;
$gray-darker: #727272;
$gray-darkest: #3d3d3d;
$transparent-gray: #26292B1A;

//  Create shades of each color and return values as map
@function color-map($color, $values) {
  $base:      $values;
  $lightest:  mix(white, $values, 80%);
  $lighter:   mix(white, $values, 20%);
  $darker:    mix(#555, $values, 20%);
  $darkest:   mix(black, $values, 20%);

  $color-shades: (
      #{$color}-base:       $base,
      #{$color}-lightest:   $lightest,
      #{$color}-lighter:    $lighter,
      #{$color}-darker:     $darker,
      #{$color}-darkest:    $darkest
  );

  @return $color-shades;
}
 
//  Set up master map for all colors
@function color-maps($colors) {
  $color-map: ();

  @each $color, $value in $colors {
      $map: (color-map($color, $value));
      $color-map: map-merge($color-map, $map);
  }

  @return $color-map;
}

//  Initiate maps function to build maps
$color-map: color-maps($colors);

//  Create mixin to better call colors from map
@function get-color($color, $shade: base) {
  @return map-get($color-map, #{$color}-#{$shade});
}


/* ======================================
========================================= BREAKPOINTS
====================================== */

$xs: 28rem;
$sm: 42rem;
$md: 64rem;
$lg: 86rem;
$xl: 120rem;

$breakpoints: (
  'xs': $xs,
  'sm': $sm,
  'md': $md,
  'lg': $lg,
  'xl': $xl
) !default;

@mixin wider-than($breakpoint) {

    @if map-has-key($breakpoints, $breakpoint) {
      @media (min-width: map-get($breakpoints, $breakpoint)) {
        @content;
      }
    }
   
    // If the key doesn't exist in the map
    @else {
      @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
          + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
  }

$paddings: (
  $xs: .75rem,
  $sm: 1rem,
  $md: 1.25rem,
  $lg: 1.25rem
);

@mixin r($properties, $defaultValue, $definitions: ()) {
    
    @each $property in $properties {
      #{$property}: #{$defaultValue};
    }
  
    @each $breakpoint, $value in $definitions {
      @media (min-width: #{$breakpoint}) {
        @each $property in $properties {
          #{$property}: #{$value};
        }
      }
    }
  }

/* ======================================
========================================= LAYOUT
====================================== */

@mixin runway {
  max-width: 100rem;
  margin-left: auto;
  margin-right: auto;
}


/* ======================================
========================================= TYPOGRAPHY
====================================== */
    
@mixin display {
  font-family: garamond-premier-pro-display, Times, serif;
  font-weight: 400;
}

@mixin subhead {
  font-family: garamond-premier-pro-subhead, Times, serif;
  font-weight: 400;
}

@mixin caption {
  font-family: garamond-premier-pro-caption, Times, serif;
  font-weight: 400;
}

@mixin grotesk {
  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
  font-weight: normal;
}
  
  